// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.20.1
// source: storage.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	StorageService_AddEmail_FullMethodName       = "/StorageService/AddEmail"
	StorageService_AddEmailRevert_FullMethodName = "/StorageService/AddEmailRevert"
	StorageService_GetAllEmails_FullMethodName   = "/StorageService/GetAllEmails"
)

// StorageServiceClient is the client API for StorageService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StorageServiceClient interface {
	AddEmail(ctx context.Context, in *AddEmailRequest, opts ...grpc.CallOption) (*AddEmailResponse, error)
	AddEmailRevert(ctx context.Context, in *AddEmailRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetAllEmails(ctx context.Context, in *GetAllEmailsRequest, opts ...grpc.CallOption) (*GetAllEmailsResponse, error)
}

type storageServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStorageServiceClient(cc grpc.ClientConnInterface) StorageServiceClient {
	return &storageServiceClient{cc}
}

func (c *storageServiceClient) AddEmail(ctx context.Context, in *AddEmailRequest, opts ...grpc.CallOption) (*AddEmailResponse, error) {
	out := new(AddEmailResponse)
	err := c.cc.Invoke(ctx, StorageService_AddEmail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageServiceClient) AddEmailRevert(ctx context.Context, in *AddEmailRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, StorageService_AddEmailRevert_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageServiceClient) GetAllEmails(ctx context.Context, in *GetAllEmailsRequest, opts ...grpc.CallOption) (*GetAllEmailsResponse, error) {
	out := new(GetAllEmailsResponse)
	err := c.cc.Invoke(ctx, StorageService_GetAllEmails_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StorageServiceServer is the server API for StorageService service.
// All implementations should embed UnimplementedStorageServiceServer
// for forward compatibility
type StorageServiceServer interface {
	AddEmail(context.Context, *AddEmailRequest) (*AddEmailResponse, error)
	AddEmailRevert(context.Context, *AddEmailRequest) (*emptypb.Empty, error)
	GetAllEmails(context.Context, *GetAllEmailsRequest) (*GetAllEmailsResponse, error)
}

// UnimplementedStorageServiceServer should be embedded to have forward compatible implementations.
type UnimplementedStorageServiceServer struct {
}

func (UnimplementedStorageServiceServer) AddEmail(context.Context, *AddEmailRequest) (*AddEmailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddEmail not implemented")
}
func (UnimplementedStorageServiceServer) AddEmailRevert(context.Context, *AddEmailRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddEmailRevert not implemented")
}
func (UnimplementedStorageServiceServer) GetAllEmails(context.Context, *GetAllEmailsRequest) (*GetAllEmailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllEmails not implemented")
}

// UnsafeStorageServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StorageServiceServer will
// result in compilation errors.
type UnsafeStorageServiceServer interface {
	mustEmbedUnimplementedStorageServiceServer()
}

func RegisterStorageServiceServer(s grpc.ServiceRegistrar, srv StorageServiceServer) {
	s.RegisterService(&StorageService_ServiceDesc, srv)
}

func _StorageService_AddEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServiceServer).AddEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StorageService_AddEmail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServiceServer).AddEmail(ctx, req.(*AddEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageService_AddEmailRevert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServiceServer).AddEmailRevert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StorageService_AddEmailRevert_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServiceServer).AddEmailRevert(ctx, req.(*AddEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageService_GetAllEmails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllEmailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServiceServer).GetAllEmails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StorageService_GetAllEmails_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServiceServer).GetAllEmails(ctx, req.(*GetAllEmailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// StorageService_ServiceDesc is the grpc.ServiceDesc for StorageService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StorageService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "StorageService",
	HandlerType: (*StorageServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddEmail",
			Handler:    _StorageService_AddEmail_Handler,
		},
		{
			MethodName: "AddEmailRevert",
			Handler:    _StorageService_AddEmailRevert_Handler,
		},
		{
			MethodName: "GetAllEmails",
			Handler:    _StorageService_GetAllEmails_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "storage.proto",
}
